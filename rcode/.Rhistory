# 30 replications
list.files(path="./data",
recursive=TRUE,
pattern="^Joule.*\\.csv")
# 30 replications
list.files(path="./data",
recursive=TRUE,
pattern="^Joule.*\\.csv")
# 30 replications
list.files(path="./data",
recursive=TRUE,
pattern="^Joule.*\\.csv",
full.names=TRUE)
csv_paths %>%
lapply(read_csv)
library(magrittr) #to use %>% notation
csv_paths %>%
lapply(read_csv)
plications
csv_pat
# 30 replications
csv_paths <- list.files(path="./data",
recursive=TRUE,
pattern="^Joule.*\\.csv",
full.names=TRUE)
library(magrittr) #to use %>% notation
csv_paths %>%
lapply(read_csv)
csv_paths %>%
lapply(read_csv)
library(tidyverse)
csv_paths %>%
lapply(read_csv) %>%
bind_rows
library(tidyverse)
library(magrittr) #to use %>% notation
csv_paths %>%
lapply(read_csv) %>%
bind_rows
paths %>%
lapply(read_csv) %>%
bind_rows
csv_paths <- list.files(path="./data",
recursive=TRUE,
pattern="^Joule.*\\.csv",
full.names=TRUE)
csv_paths %>%
lapply(read_csv) %>%
bind_rows
rittr) #to use %>% notation
library(tidyverse)
data(mtcars)
#FAKE DATA
# Data in two numeric vectors
battery_usage_memo <- c(38.9, 61.2, 73.3, 21.8, 63.4, 64.6, 48.4, 48.8, 48.5)
battery_usage_nonmemo <- c(67.8, 60, 63.4, 76, 89.4, 73.3, 67.3, 61.3, 62.4)
# Create a data frame
battery_data <- data.frame(
memoized = rep(c("TRUE", "FALSE"), each = 9),
battery_usage = c(battery_usage_memo,  battery_usage_nonmemo)
)
# 30 replications
csv_paths <- list.files(path="./data",
recursive=TRUE,
pattern="^Joule.*\\.csv",
full.names=TRUE)
csv_paths %>%
lapply(read_csv) %>%
bind_rows
library(magrittr) #to use %>% notation
library(tidyverse)
data(mtcars)
#FAKE DATA
# Data in two numeric vectors
battery_usage_memo <- c(38.9, 61.2, 73.3, 21.8, 63.4, 64.6, 48.4, 48.8, 48.5)
battery_usage_nonmemo <- c(67.8, 60, 63.4, 76, 89.4, 73.3, 67.3, 61.3, 62.4)
# Create a data frame
battery_data <- data.frame(
memoized = rep(c("TRUE", "FALSE"), each = 9),
battery_usage = c(battery_usage_memo,  battery_usage_nonmemo)
)
# 30 replications
csv_paths <- list.files(path="./data",
recursive=TRUE,
pattern="^Joule.*\\.csv",
full.names=TRUE)
csv_paths %>%
lapply(read_csv) %>%
bind_rows
install.packages("readr")
library(magrittr) #to use %>% notation
library(tidyverse)
data(mtcars)
#FAKE DATA
# Data in two numeric vectors
battery_usage_memo <- c(38.9, 61.2, 73.3, 21.8, 63.4, 64.6, 48.4, 48.8, 48.5)
battery_usage_nonmemo <- c(67.8, 60, 63.4, 76, 89.4, 73.3, 67.3, 61.3, 62.4)
# Create a data frame
battery_data <- data.frame(
memoized = rep(c("TRUE", "FALSE"), each = 9),
battery_usage = c(battery_usage_memo,  battery_usage_nonmemo)
)
# 30 replications
csv_paths <- list.files(path="./data",
recursive=TRUE,
pattern="^Joule.*\\.csv",
full.names=TRUE)
csv_paths %>%
lapply(read_csv) %>%
bind_rows
#get csv paths of test folder
csv_paths_test <- list.files(path="./data/test",
recursive=TRUE,
pattern="^Joule.*\\.csv",
full.names=TRUE)
#get data from csv files
test_data <- csv_paths_test %>%
lapply(read_csv) %>%
bind_rows
library(magrittr) #to use %>% notation
library(tidyverse)
library(dplyr)
#get csv paths of test folder
csv_paths_test <- list.files(path="./data/test",
recursive=TRUE,
pattern="^Joule.*\\.csv",
full.names=TRUE)
#get data from csv files
test_data <- csv_paths_test %>%
lapply(read_csv) %>%
bind_rows
#add new factor to data which are taken from the path (memoized an non_memoized)
test_data['experiment'] <-csv_paths_test %>%
strsplit('/', fixed=TRUE) %>%
rapply(nth, n=4) %>%
factor()
#-Check assumptions
#--Assumption 1: Are the two samples independents? Yes
#--Assumption 2: Normal distribution in both groups?
par(mfrow=c(2,2))
check_normality <- function(data) {
plot(density(data))
qqnorm(data)
shapiro.test(data)
}
#Shapiro-Wilk normality test
test_data %>%
filter(experiment == 'memoized') %>%
select(Joule_calculated) %>%
unlist() %>%
check_normality #p-value should be greater than 0.05
test_data %>%
filter(experiment == 'non_memoized') %>%
select(Joule_calculated) %>%
unlist() %>%
check_normality #p-value should be greater than 0.05
#--Assumption 3: Homogeneity in variances?
res.ftest <- var.test(Joule_calculated ~ experiment, data = test_data)
res.ftest #p-value should be greater than 0.05
#-T-test is used to compare two means
res.ttest <- t.test(Joule_calculated ~ experiment, data = test_data)
res.ttest
#effect size?
require(effsize)
cohen.d(Joule_calculated ~ experiment, data = test_data)
library(magrittr) #to use %>% notation
library(tidyverse)
library(dplyr)
library(ggplot2)
#get data from csv files
test_data <- csv_paths_test %>%
lapply(read_csv) %>%
bind_rows
test_data
#add new factor to data which are taken from the path (memoized an non_memoized)
test_data['experiment'] <-csv_paths_test %>%
strsplit('/', fixed=TRUE) %>%
rapply(nth, n=4) %>%
factor()
test_data
ggplot(test_data, ae(x=dbl, y=fct, fill=dbl))
ggplot(test_data, aes(x=dbl, y=fct, fill=dbl))
ggplot(test_data, aes(x=Joule_calculated, y=experiment, fill=Joule_calculated))
ggplot(test_data, aes(x=Joule_calculated, y=experiment, fill=Joule_calculated)) + geom_boxplot()
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=Joule_calculated)) + geom_boxplot()
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=experiment)) + geom_boxplot()
stat_summary(fun=mean, color='black', geom ='point')
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=experiment)) + geom_boxplot()
stat_summary(fun=mean, color='black', geom ='point')
+ stat_summary(fun=mean, color='black', geom ='point')
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=experiment)) +
geom_boxplot() +
stat_summary(fun=mean, color='black', geom ='point')
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=experiment)) +
geom_violin(outlier, size=.5) +
geom_boxplot() +
stat_summary(fun=mean, color='black', geom ='point')
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=experiment)) +
geom_violin(outlier.size=.5) +
geom_boxplot() +
stat_summary(fun=mean, color='black', geom ='point')
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=experiment)) +
geom_violin(trim=FALSE, alpha=1) +
geom_boxplot() +
stat_summary(fun=mean, color='black', geom ='point')
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=experiment)) +
#interesting looking shape represents the distribution
geom_jitter() +
#add boxplots
geom_boxplot() +
#add points
stat_summary(fun=mean, color='black', geom ='point')
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=experiment)) +
#points
geom_jitter(width=.1) +
#add boxplots
geom_boxplot() +
#add points
stat_summary(fun=mean, color='black', geom ='point')
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=experiment)) +
xlab("Experiment") + ylab("Joule calculated") +
#interesting looking shape represents the distribution
geom_violin(trim=FALSE, alpha=1) +
#add boxplots
geom_boxplot() +
#add points
stat_summary(fun=mean, color='black', geom ='point')
#-T-test is used to compare two means
res.ttest <- t.test(Joule_calculated ~ experiment, data = test_data)
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=experiment)) +
ylim(50, 55) +
#add labels
xlab("Experiment") + ylab("Joule calculated") +
#interesting looking shape represents the distribution
geom_violin(trim=FALSE, alpha=1) +
#add boxplots
geom_boxplot() +
#add points
stat_summary(fun=mean, color='black', geom ='point')
library(magrittr) #to use %>% notation
library(tidyverse)
library(dplyr)
library(ggplot2)
#get csv paths of test folder
csv_paths_test <- list.files(path="./data/test",
recursive=TRUE,
pattern="^Joule.*\\.csv",
full.names=TRUE)
#get data from csv files
test_data <- csv_paths_test %>%
lapply(read_csv) %>%
bind_rows
#add new factor to data which are taken from the path (memoized an non_memoized)
test_data['experiment'] <-csv_paths_test %>%
strsplit('/', fixed=TRUE) %>%
rapply(nth, n=4) %>%
factor()
#-Check assumptions
#--Assumption 1: Are the two samples independents? Yes
#--Assumption 2: Normal distribution in both groups?
par(mfrow=c(2,2))
check_normality <- function(data) {
plot(density(data))
qqnorm(data)
shapiro.test(data)
}
#Shapiro-Wilk normality test
test_data %>%
filter(experiment == 'memoized') %>%
select(Joule_calculated) %>%
unlist() %>%
check_normality #p-value should be greater than 0.05
test_data %>%
filter(experiment == 'non_memoized') %>%
select(Joule_calculated) %>%
unlist() %>%
check_normality #p-value should be greater than 0.05
#--Assumption 3: Homogeneity in variances?
res.ftest <- var.test(Joule_calculated ~ experiment, data = test_data)
res.ftest #p-value should be greater than 0.05
#-T-test is used to compare two means
res.ttest <- t.test(Joule_calculated ~ experiment, data = test_data)
res.ttest
#effect size?
require(effsize)
cohen.d(Joule_calculated ~ experiment, data = test_data)
test_data
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=experiment)) +
#limits are possible
#ylim(50, 55) +
#add labels
xlab("Experiment") + ylab("Joule calculated") +
#interesting looking shape represents the distribution
geom_violin(trim=FALSE, alpha=1, show.legend = FALSE) +
#add boxplots
geom_boxplot(show.legend = FALSE) +
#add points
stat_summary(fun=mean, color='black', geom ='point', show.legend = FALSE)
ggplot(test_data, aes(y=Joule_calculated, x=experiment, fill=experiment)) +
#points
geom_jitter(width=.1, show.legend = FALSE) +
#add boxplots
geom_boxplot(show.legend = FALSE) +
#add points
stat_summary(fun=mean, color='black', geom ='point', show.legend = FALSE)
ggplot(test_data, aes(sample=Joule_calculated))+stat_qq()
ggplot(test_data, aes(sample=Joule_calculated))+stat_qq()+geom_qq_line()
#qqplot with beautiful line
ggplot(test_data, aes(sample=Joule_calculated))+stat_qq()+geom_qq_line(ccolor="red")
#qqplot with beautiful line
ggplot(test_data, aes(sample=Joule_calculated))+stat_qq()+geom_qq_line(color="red")
#qqplot with beautiful line
ggplot(test_data, aes(sample=Joule_calculated))+stat_qq(color="blue")+geom_qq_line(color="red")
libary(car)
library(car)
install.packages("car")
library(car)
R.version.string
install.packages("installr")
install.packages("installr")
updateR()
library(installr)
updateR()
R.version.string
exit
